1.注释
单行注释，#后的语句不会被运行
例子：
#这是一行注释
print("Hello World！")
#Hello 
区间注释，""" """ 和 ''' '''
例子：

"""
注释
全是注释
"""
print("Hello World！")
'''
还是注释
'''

2.运算符
算术运算符


print(1 + 1)  # 2
print(2 - 1)  # 1
print(3 * 4)  # 12
print(3 / 4)  # 0.75
print(3 // 4)  # 0
print(3 % 4)  # 3
print(2 ** 3)  # 8


比较运算符


print((3 > 2) and (3 < 5))  # True
print((1 > 3) or (9 < 2))  # False
print(not (2 > 1))  # False


逻辑运算符


print((3 > 2) and (3 < 5))  # True
print((1 > 3) or (9 < 2))  # False
print(not (2 > 1))  # False

位运算符


Python 位运算按照数据在内存中的二进制位（Bit）进行操作，它一般用于底层开发（算法设计、驱动、图像处理、单片机等），在应用层开发（Web 开发、Linux 运维等）中并不常见。这里需要有二进制的知识作为辅助理解。[1][2]

print(bin(4))  # 0b100
print(bin(5))  # 0b101
print(bin(~4), ~4)  # -0b101 -5
print(bin(4 & 5), 4 & 5)  # 0b100 4
print(bin(4 | 5), 4 | 5)  # 0b101 5
print(bin(4 ^ 5), 4 ^ 5)  # 0b1 1
print(bin(4 << 2), 4 << 2)  # 0b10000 16
print(bin(4 >> 2), 4 >> 2)  # 0b1 1


三元运算符

#一般写法
x, y = 4, 5
if x < y:
 small = x
else:
 small = y
#用三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。
x, y = 4, 5
small = x if x < y else y
print(small)  # 4

其它运算符


#【例子】比较的两个变量均指向不可变类型。
letters = ['A', 'B', 'C']
if 'A' in letters:
 print('A' + ' exists')
if 'h' not in letters:
 print('h' + ' not exists')

# A exists
# h not exists

#【例子】比较的两个变量均指向可变类型。
a = "hello"
b = "hello"
print(a is b, a == b)  # True True
print(a is not b, a != b)  # False False



注意：

is, is not 对比的是两个变量的内存地址
==, != 对比的是两个变量的值
比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。
对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。
运算符的优先级
